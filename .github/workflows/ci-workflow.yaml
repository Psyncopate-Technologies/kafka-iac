name: CI Workflow for Kafka Client Resources

on:
  workflow_call:
    inputs:
      file:
        required: true
        type: string
      cloud:
        required: true
        type: string
      env:
        required: true
        type: string
      pipeline_version:
        required: true
        type: string
      resource_type:
        required: true
        type: string

jobs:
  stage-environment:
    name: "Terraform CI for ${{ inputs.resource_type }} in ${{ inputs.env }}"
    runs-on: ubuntu-latest
    environment: ${{ inputs.env }}

    env:
      FILE_NAME: ${{ inputs.file }}
      CLOUD_PROVIDER: ${{ inputs.cloud }}
      ENV: ${{ inputs.env }}
      PIPELINE_VERSION: ${{ inputs.pipeline_version }}
      RESOURCE_TYPE: ${{ inputs.resource_type }}

    steps:
      #---------------------------------------------
      # Checkout both repositories
      #---------------------------------------------
      - name: Checkout kafka-iac (infra modules)
        uses: actions/checkout@v4
        with:
          repository: Psyncopate-Technologies/kafka-iac
          ref: ${{ inputs.pipeline_version }}
          token: ${{ secrets.ACCESS_TOKEN }}
          path: kafka-iac

      - name: Checkout kafka-client-config (env-specific config)
        uses: actions/checkout@v4
        with:
          repository: Psyncopate-Technologies/kafka-client-config
          token: ${{ secrets.ACCESS_TOKEN }}
          path: kafka-client-config

      #---------------------------------------------
      # YAML Lint Validation
      #---------------------------------------------
      - name: Validate YAML syntax and style
        run: |
          echo "Linting kafka-client-config/${{ env.FILE_NAME }}..."
          sudo apt-get update && sudo apt-get install -y yamllint
          yamllint kafka-client-config/${{ env.FILE_NAME }}

      #---------------------------------------------
      # Compute and export working directory
      #---------------------------------------------
      - name: Derive DIR_PATH and base FILE_NAME
        id: compute-paths
        run: |
          DIR_PATH=$(dirname "$FILE_NAME")
          echo "DIR_PATH=$DIR_PATH" >> $GITHUB_ENV
          echo "FILE_NAME=$(basename $FILE_NAME)" >> $GITHUB_ENV
          echo "Working on: $DIR_PATH/$FILE_NAME"

      #---------------------------------------------
      # Copy Terragrunt config into place
      #---------------------------------------------
      - name: Sync terragrunt.hcl configs
        run: |
          mkdir -p kafka-client-config/_common
          cp -r kafka-iac/terragrunt/_common/. kafka-client-config/_common/

          cp kafka-iac/terragrunt/${{ env.RESOURCE_TYPE }}/terragrunt.hcl \
             kafka-client-config/${{ env.DIR_PATH }}/terragrunt.hcl

      #---------------------------------------------
      # Inject common secrets and env vars
      #---------------------------------------------
      - name: Inject common secrets
        run: |
          {
            echo "GITHUB_TOKEN=${{ secrets.ACCESS_TOKEN }}"
            echo "CONFLUENT_API_KEY=${{ secrets.CONFLUENT_API_KEY }}"
            echo "CONFLUENT_API_SECRET=${{ secrets.CONFLUENT_API_SECRET }}"
            echo "DEFAULT_PATITION_COUNT=${{ vars.DEFAULT_PATITION_COUNT }}"
            echo "CC_KAFKA_API_KEY=${{ secrets.CC_KAFKA_API_KEY }}"
            echo "CC_KAFKA_API_SECRET=${{ secrets.CC_KAFKA_API_SECRET }}"
            echo "CC_KAFKA_CLUSTER_NAME=${{ secrets.CC_KAFKA_CLUSTER_NAME }}"
            echo "ENVIRONMENT_NAME=${{ secrets.ENVIRONMENT_NAME }}"
          } >> $GITHUB_ENV

      
      #---------------------------------------------
      # Inject cloud-specific secrets
      #---------------------------------------------
      - name: Inject cloud credentials and secrets
        run: |
          echo "Injecting secrets for cloud: $CLOUD_PROVIDER"
          case "$CLOUD_PROVIDER" in
            azure)
              {
                echo "AZURE_RESOURCE_GROUP_NAME=${{ secrets.AZURE_RESOURCE_GROUP_NAME }}"
                echo "AZURE_STORAGE_ACCOUNT_NAME=${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}"
                echo "AZURE_CONTAINER_NAME=${{ secrets.AZURE_CONTAINER_NAME }}"
                echo "ARM_CLIENT_ID=${{ secrets.ARM_CLIENT_ID }}"
                echo "ARM_CLIENT_SECRET=${{ secrets.ARM_CLIENT_SECRET }}"
                echo "ARM_SUBSCRIPTION_ID=${{ secrets.ARM_SUBSCRIPTION_ID }}"
                echo "ARM_TENANT_ID=${{ secrets.ARM_TENANT_ID }}"
              } >> $GITHUB_ENV
              ;;
            gcp)
              {
                echo "GOOGLE_CREDENTIALS=${{ secrets.GOOGLE_CREDENTIALS }}"
                echo "GCP_BUCKET_NAME=${{ secrets.GCP_BUCKET_NAME }}"
              } >> $GITHUB_ENV
              ;;
            aws)
              {
                echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}"
                echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}"
                echo "AWS_REGION=${{ secrets.AWS_REGION }}"
                echo "S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}"
              } >> $GITHUB_ENV
              ;;
            *)
              echo "::error:: Unsupported cloud provider: $CLOUD_PROVIDER"
              exit 1
              ;;
          esac

      #---------------------------------------------
      # Setup Terraform CLI
      #---------------------------------------------
      - name: Setup Terraform CLI
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      #---------------------------------------------
      # Install Terragrunt
      #---------------------------------------------
      - name: Install Terragrunt
        run: |
          wget -q https://github.com/gruntwork-io/terragrunt/releases/download/v0.56.3/terragrunt_linux_amd64
          chmod +x terragrunt_linux_amd64
          sudo mv terragrunt_linux_amd64 /usr/local/bin/terragrunt
          echo "Terragrunt version: $(terragrunt --version)"

      #---------------------------------------------
      # Terraform Lifecycle Steps
      #---------------------------------------------
      - name: Terragrunt Init
        working-directory: kafka-client-config/${{ env.DIR_PATH }}
        run: |
          echo "Initializing Terragrunt in kafka-client-config/${{ env.DIR_PATH }}"
          terragrunt init

      - name: Terragrunt Validate
        working-directory: kafka-client-config/${{ env.DIR_PATH }}
        run: |
          echo "Validating Terraform configuration..."
          terragrunt validate

      - name: Terragrunt Plan
        working-directory: kafka-client-config/${{ env.DIR_PATH }}
        run: |
          echo "Generating Terraform plan..."
          terragrunt plan

      - name: Summary
        run: |
          echo "Terragrunt plan completed for $RESOURCE_TYPE in $ENV"
