# CI Workflow for Kafka Resource Management
name: CI Workflow for Kafka Client Resources

on:
  workflow_call:
    inputs:
      file:
        required: true
        type: string
      cloud:
        required: true
        type: string
      env:
        required: true
        type: string
      pipeline_version:
        required: true
        type: string
      resource_type:
        required: true
        type: string

jobs:
  stage-environment:
    runs-on: ubuntu-latest
    environment: ${{ inputs.env }}
    env:
      FILE_NAME: ${{ inputs.file }}
      CLOUD_PROVIDER: ${{ inputs.cloud }}
      ENV: ${{ inputs.env }}
      PIPELINE_VERSION: ${{ inputs.pipeline_version }}
      RESOURCE_TYPE: ${{ inputs.resource_type }}
    steps:
      - name: Checkout kafka-iac
        uses: actions/checkout@v4
        with:
          repository: Psyncopate-Technologies/kafka-iac
          ref: ${{ inputs.pipeline_version }}
          token: ${{ secrets.ACCESS_TOKEN }}
          path: kafka-iac

      - name: Checkout kafka-client-config
        uses: actions/checkout@v4
        with:
          repository: Psyncopate-Technologies/kafka-client-config
          token: ${{ secrets.ACCESS_TOKEN }}
          path: kafka-client-config

      - name: Set computed environment variables
        run: |
          DIR_PATH=$(dirname "$FILE_NAME")
          echo "DIR_PATH=$DIR_PATH" >> $GITHUB_ENV
          echo "FILE_NAME=$(basename $FILE_NAME)" >> $GITHUB_ENV

      - name: Copy terragrunt.hcl to kafka-client-config
        run: |
          mkdir -p kafka-client-config/_common
          mkdir -p kafka-client-config/${{ env.RESOURCE_TYPE }}
          cp -r kafka-iac/terragrunt/_common/. kafka-client-config/_common/
          cp kafka-iac/terragrunt/${{ env.RESOURCE_TYPE }}/terragrunt.hcl kafka-client-config/${{ env.RESOURCE_TYPE }}/terragrunt.hcl

      - name: Set cloud-specific secrets
        run: |
          echo "Setting env for: $CLOUD_PROVIDER"
          if [[ "$CLOUD_PROVIDER" == "azure" ]]; then
            echo "CONFLUENT_API_KEY=${{ secrets.CONFLUENT_API_KEY }}" >> $GITHUB_ENV
            echo "CONFLUENT_API_SECRET=${{ secrets.CONFLUENT_API_SECRET }}" >> $GITHUB_ENV
            echo "CC_KAFKA_API_KEY=${{ secrets.CC_KAFKA_API_KEY }}" >> $GITHUB_ENV
            echo "CC_KAFKA_API_SECRET=${{ secrets.CC_KAFKA_API_SECRET }}" >> $GITHUB_ENV
            echo "CC_KAFKA_CLUSTER_NAME=${{ secrets.CC_KAFKA_CLUSTER_NAME }}" >> $GITHUB_ENV
            echo "ENVIRONMENT_NAME=${{ secrets.ENVIRONMENT_NAME }}" >> $GITHUB_ENV
            echo "DEFAULT_PATITION_COUNT=${{ variable.DEFAULT_PATITION_COUNT }}" >> $GITHUB_ENV
            echo "AZURE_RESOURCE_GROUP_NAME=${{ secrets.AZURE_RESOURCE_GROUP_NAME }}" >> $GITHUB_ENV
            echo "AZURE_STORAGE_ACCOUNT_NAME=${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}" >> $GITHUB_ENV
            echo "AZURE_CONTAINER_NAME=${{ secrets.AZURE_CONTAINER_NAME }}" >> $GITHUB_ENV
            echo "ARM_CLIENT_ID=${{ secrets.ARM_CLIENT_ID }}" >> $GITHUB_ENV
            echo "ARM_CLIENT_SECRET=${{ secrets.ARM_CLIENT_SECRET }}" >> $GITHUB_ENV
            echo "ARM_SUBSCRIPTION_ID=${{ secrets.ARM_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
            echo "ARM_TENANT_ID=${{ secrets.ARM_TENANT_ID }}" >> $GITHUB_ENV
          elif [[ "$CLOUD_PROVIDER" == "gcp" ]]; then
            echo "CONFLUENT_API_KEY=${{ secrets.CONFLUENT_API_KEY }}" >> $GITHUB_ENV
            echo "CONFLUENT_API_SECRET=${{ secrets.CONFLUENT_API_SECRET }}" >> $GITHUB_ENV
            echo "KAFKA_API_KEY=${{ secrets.KAFKA_API_KEY }}" >> $GITHUB_ENV
            echo "KAFKA_API_SECRET=${{ secrets.KAFKA_API_SECRET }}" >> $GITHUB_ENV
            echo "KAFKA_CLUSTER_ID=${{ secrets.KAFKA_CLUSTER_ID }}" >> $GITHUB_ENV
            echo "KAFKA_REST_ENDPOINT=${{ secrets.KAFKA_REST_ENDPOINT }}" >> $GITHUB_ENV
            echo "GOOGLE_CREDENTIALS=${{ secrets.GOOGLE_CREDENTIALS }}" >> $GITHUB_ENV
            echo "GCP_BUCKET_NAME=${{ secrets.GCP_BUCKET_NAME }}" >> $GITHUB_ENV
          elif [[ "$CLOUD_PROVIDER" == "aws" ]]; then
            echo "CONFLUENT_API_KEY=${{ secrets.CONFLUENT_API_KEY }}" >> $GITHUB_ENV
            echo "CONFLUENT_API_SECRET=${{ secrets.CONFLUENT_API_SECRET }}" >> $GITHUB_ENV
            echo "KAFKA_API_KEY=${{ secrets.KAFKA_API_KEY }}" >> $GITHUB_ENV
            echo "KAFKA_API_SECRET=${{ secrets.KAFKA_API_SECRET }}" >> $GITHUB_ENV
            echo "KAFKA_CLUSTER_ID=${{ secrets.KAFKA_CLUSTER_ID }}" >> $GITHUB_ENV
            echo "KAFKA_REST_ENDPOINT=${{ secrets.KAFKA_REST_ENDPOINT }}" >> $GITHUB_ENV
            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
            echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> $GITHUB_ENV
            echo "S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}" >> $GITHUB_ENV
          else
            echo "Unsupported cloud provider: $CLOUD_PROVIDER"
            exit 1
          fi

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
      
      - name: Install Terragrunt
        run: |
          wget -q https://github.com/gruntwork-io/terragrunt/releases/download/v0.56.3/terragrunt_linux_amd64
          chmod +x terragrunt_linux_amd64
          sudo mv terragrunt_linux_amd64 /usr/local/bin/terragrunt

      - name: Terragrunt Init
        working-directory: kafka-client-config/${{ env.RESOURCE_TYPE }}
        run: terragrunt init

      - name: Terragrunt Validate
        working-directory: kafka-client-config/${{ env.RESOURCE_TYPE }}
        run: terragrunt validate

      - name: Terragrunt Plan
        working-directory: kafka-client-config/${{ env.RESOURCE_TYPE }}
        run: terragrunt plan